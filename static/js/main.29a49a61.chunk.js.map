{"version":3,"sources":["components/Notification/Notification.jsx","components/Container/Container.jsx","components/ContactsFomr/ContactsFomr.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.jsx","index.js"],"names":["toastrOptions","toastr","options","closeButton","debug","newestOnTop","progressBar","positionClass","preventDuplicates","onclick","showDuration","hideDuration","timeOut","extendedTimeOut","showEasing","hideEasing","showMethod","hideMethod","Container","children","className","INITIAL_STATE","name","number","ContactsFomr","state","onChange","event","currentTarget","value","setState","onSubmit","preventDefault","props","reset","this","autoComplete","type","pattern","title","required","Component","ContactsList","contacts","onDeleteContact","map","id","onClick","Filter","App","filter","checkNameValidatiton","newName","find","addContact","error","contact","shortid","generate","deleteContact","todoId","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVAuBeA,G,MApBO,WACpB,OAAQC,IAAOC,QAAU,CACvBC,aAAa,EACbC,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,cAAe,kBACfC,mBAAmB,EACnBC,QAAS,KACTC,aAAc,MACdC,aAAc,OACdC,QAAS,OACTC,gBAAiB,MACjBC,WAAY,QACZC,WAAY,SACZC,WAAY,SACZC,WAAY,a,eCTDC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKC,UAAU,YAAf,SAA4BD,K,eCA1DE,G,MAAgB,CACpBC,KAAM,GACNC,OAAQ,KAqEKC,E,4MAjEbC,M,eAAaJ,G,EAEbK,SAAW,SAACC,GACV,MAAwBA,EAAMC,cAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGR,EAAOO,K,EAIZE,SAAW,SAACJ,GACVA,EAAMK,iBAEN,EAAKC,MAAMF,SAAS,EAAKN,OAEzB,EAAKS,S,EAGPA,MAAQ,WACN,EAAKJ,SAAL,eAAmBT,K,4CAGrB,WACE,OACE,uBAAMD,UAAU,OAAOW,SAAUI,KAAKJ,SAAtC,UACE,wBAAOX,UAAU,cAAjB,UACE,sBAAMA,UAAU,aAAhB,kBACA,uBACEA,UAAU,cACVS,MAAOM,KAAKV,MAAMH,KAClBI,SAAUS,KAAKT,SACfU,aAAa,MACbC,KAAK,OACLf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,kCACE,sBAAMpB,UAAU,aAAhB,oBACA,uBACEA,UAAU,cACVS,MAAOM,KAAKV,MAAMF,OAClBG,SAAUS,KAAKT,SACfU,aAAa,MACbC,KAAK,MACLf,KAAK,SACLgB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQpB,UAAU,eAAeiB,KAAK,SAAtC,gC,GAtDmBI,aCoBZC,G,MAzBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAb,OACnB,oBAAIxB,UAAU,iBAAd,SACGuB,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAIH,UAAU,iBAAd,UACE,oBAAGA,UAAU,iBAAb,UACGE,EADH,KACWC,KAGX,wBACEc,KAAK,SACLjB,UAAU,cACV2B,QAAS,kBAAMH,EAAgBE,IAHjC,sBALkCA,UCc3BE,EAjBA,SAAC,GAAD,IAAGnB,EAAH,EAAGA,MAAOH,EAAV,EAAUA,SAAV,OACb,wBAAON,UAAU,cAAjB,UACE,sBAAMA,UAAU,aAAhB,mCACA,uBACEA,UAAU,cACViB,KAAK,OACLR,MAAOA,EACPH,SAAUA,QCqEDuB,E,4MAtEbxB,MAAQ,CACNkB,SAAU,CACR,CAAEG,GAAI,OAAQxB,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEuB,GAAI,OAAQxB,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEuB,GAAI,OAAQxB,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEuB,GAAI,OAAQxB,KAAM,iBAAkBC,OAAQ,cAEhD2B,OAAQ,I,EAGVC,qBAAuB,SAACC,GAEtB,OADiB,EAAK3B,MAAMkB,SACZU,MAAK,qBAAG/B,OAAoB8B,M,EAG9CE,WAAa,YAAuB,IAApBhC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpB,GAAK,EAAK4B,qBAAqB7B,GAa/BrB,IAAOsD,MAAP,UAAgBjC,EAAhB,4BACAtB,QAdA,CACE,IAAMwD,EAAU,CACdV,GAAIW,IAAQC,WACZpC,OACAC,UAGF,EAAKO,UAAS,gBAAGa,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEa,GAAH,mBAAeb,U,EAS7BgB,cAAgB,SAACC,GACf,EAAK9B,UAAS,SAAC+B,GAAD,MAAgB,CAC5BlB,SAAUkB,EAAUlB,SAASO,QAAO,SAACM,GAAD,OAAaA,EAAQV,KAAOc,U,EAIpEE,aAAe,SAACnC,GACd,EAAKG,SAAS,CAAEoB,OAAQvB,EAAMC,cAAcC,S,EAG9CkC,mBAAqB,WACnB,MAA6B,EAAKtC,MAA1ByB,EAAR,EAAQA,OAAQP,EAAhB,EAAgBA,SACVqB,EAAmBd,EAAOe,cAEhC,OAAOtB,EAASO,QAAO,SAACM,GAAD,OACrBA,EAAQlC,KAAK2C,cAAcC,SAASF,O,4CAIxC,WACE,IAAQd,EAAWf,KAAKV,MAAhByB,OACFiB,EAAkBhC,KAAK4B,qBAC7B,OACE,eAAC,EAAD,WACE,2CACA,cAAC,EAAD,CAAchC,SAAUI,KAAKmB,aAC7B,0CACA,cAAC,EAAD,CAAQzB,MAAOqB,EAAQxB,SAAUS,KAAK2B,eACtC,cAAC,EAAD,CACEnB,SAAUwB,EACVvB,gBAAiBT,KAAKwB,uB,GAhEdlB,a,YCHlB2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.29a49a61.chunk.js","sourcesContent":["import toastr from 'toastr';\nimport 'toastr/build/toastr.css';\n\nconst toastrOptions = () => {\n  return (toastr.options = {\n    closeButton: true,\n    debug: false,\n    newestOnTop: false,\n    progressBar: true,\n    positionClass: 'toast-top-right',\n    preventDuplicates: false,\n    onclick: null,\n    showDuration: '300',\n    hideDuration: '1000',\n    timeOut: '3000',\n    extendedTimeOut: '500',\n    showEasing: 'swing',\n    hideEasing: 'linear',\n    showMethod: 'fadeIn',\n    hideMethod: 'fadeOut',\n  });\n};\n\nexport default toastrOptions;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../ContactsFomr/ContactsFomr.scss';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactsFomr extends Component {\n  state = { ...INITIAL_STATE };\n\n  onChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.onSubmit}>\n        <label className=\"form__label\">\n          <span className=\"form__name\">Name</span>\n          <input\n            className=\"form__input\"\n            value={this.state.name}\n            onChange={this.onChange}\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label>\n          <span className=\"form__name\">Number</span>\n          <input\n            className=\"form__input\"\n            value={this.state.number}\n            onChange={this.onChange}\n            autoComplete=\"off\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className=\"form__button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsFomr.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactsFomr;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../ContactsList/ContactsList.scss';\n\nconst ContactsList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contacts__list\">\n    {contacts.map(({ id, name, number }) => (\n      <li className=\"contacts__item\" key={id}>\n        <p className=\"contacts__text\">\n          {name}: {number}\n        </p>\n\n        <button\n          type=\"button\"\n          className=\"delete__btn\"\n          onClick={() => onDeleteContact(id)}\n        >\n          delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../ContactsFomr/ContactsFomr.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"form__label\">\n    <span className=\"form__name\">Find contacts by name</span>\n    <input\n      className=\"form__input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport toastr from 'toastr';\nimport toastrOptions from './components/Notification';\nimport Container from './components/Container';\nimport ContactsFomr from './components/ContactsFomr';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  checkNameValidatiton = (newName) => {\n    const contacts = this.state.contacts;\n    return contacts.find(({ name }) => name === newName);\n  };\n\n  addContact = ({ name, number }) => {\n    if (!this.checkNameValidatiton(name)) {\n      const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n      return;\n    }\n\n    toastr.error(`${name} is already in contacts`);\n    toastrOptions();\n  };\n\n  deleteContact = (todoId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== todoId),\n    }));\n  };\n\n  changeFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactsFomr onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}